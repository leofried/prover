import zfc {
	axioms
	relations {
		relations
		functions.FunctionProperties
	}
}

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol
transparent predicate R from Related

transparent predicate IsFunction(f, a, b): IsSerialRelation(f, a, b) AND IsFunctionalRelation(f, a, b)

opaque function Map(f, x): Object[:(k): R(f, x, k)](Range(f))

transparent function |10| MapSymbol(f, x): Map(f, x)

transparent function . from MapSymbol

opaque predicate IsFunctionallyClosed{F(1)}(a, b): [x @ a] F(x) @ b | is_functionally_closed

opaque function Functionator{F(1)}(a, b): Relationator[:(x, y): F(x) = y](a, b)

theorem function_map : [f][a][b](IsFunction(f, a, b) -> [x][y](R(f, x, y) <-> x @ a AND f . x = y)) {
	element f, a, b from goal
	IsFunction(f, a, b) | assumption
	element x, y from goal

	lemma lema : [w](R(f, x, w) -> [z @ Range(f)](R(f, x, z) -> w = z)) {
		element w from goal
		R(f, x, w) | assumption
		element z from goal
		z @ Range(f) | assumption
		R(f, x, z) | assumption
		w = z | is_functional
	}

	lemma : R(f, x, y) -> x @ a AND f . x = y {
		R(f, x, y) | assumption
		x @ a | left_in_bound
		y @ Range(f) | right_in_range
		[z @ Range(f)](R(f, x, z) -> y = z) | lema
		f . x = y | is_object
	}

	lemma : x @ a AND f . x = y -> R(f, x, y) {
		x @ a AND f . x = y | assumption
		x @ Domain(f) | is_serial
		element z from {z} R(f, x, z) | left_in_domain
		z @ Range(f) | right_in_range
		[w @ Range(f)](R(f, x, w) -> z = w) | lema
		f . x = z | is_object
		R(f, x, y) | substitution
	}
}

theorem function_in_bound : [f][a][b](IsFunction(f, a, b) -> [x @ a] f . x @ b) {
	element f, a, b from goal
	IsFunction(f, a, b) | assumption

	element x from goal
	x @ a | assumption
	R(f, x, f . x) | function_map
	f . x @ b | right_in_bound
}

theorem function_equality : [f][g][a][b](IsFunction(f, a, b) AND IsFunction(g, a, b) -> [x @ a](f . x = g . x) -> f = g) {
	
	lemma lema : [f][g][a][b](IsFunction(f, a, b) AND IsFunction(g, a, b) -> [x @ a](f . x = g . x) -> f # g) {
		element f, g, a, b from goal
		IsFunction(f, a, b) AND IsFunction(g, a, b) | assumption
		[x @ a](f . x = g . x) | assumption

		lemma : [x @ a][y @ b](R(f, x, y) -> R(g, x, y)) {
			element x from goal x @ a | assumption
			element y from goal y @ b | assumption
			R(f, x, y) | assumption
			x @ a | left_in_bound
			y = f . x | function_map
			  = g . x | truths
			R(g, x, y) | function_map
		}

		f # g | relation_subset
	}

	element f, g, a, b from goal
	IsFunction(f, a, b) AND IsFunction(g, a, b) | assumption
	[x @ a](f . x = g . x) | assumption

	f # g | lema
	g # f | lema
	f = g | double_inclusion
}

theorem functionator_is_function {F(1)} : [a][b](IsFunctionallyClosed{F}(a, b) <-> IsFunction(Functionator{F}(a, b), a, b)) {
	element a, b from goal

	IsRelation(Functionator{F}(a, b), a, b) | relationator_is_relation

	lemma : IsFunctionallyClosed{F}(a, b) -> IsFunction(Functionator{F}(a, b), a, b) {
		IsFunctionallyClosed{F}(a, b) | assumption		

		lemma : IsFunctional(Functionator{F}(a, b), a, b) {
			lemma : [x][y][z](R(Functionator{F}(a, b), x, y) AND R(Functionator{F}(a, b), x, z) -> y = z) {
				element x, y, z from goal
				R(Functionator{F}(a, b), x, y) AND R(Functionator{F}(a, b), x, z) | assumption
				y = F(x) | relationator_related
				  = z    | relationator_related
			}

			| is_functional
		}

		lemma : IsSerial(Functionator{F}(a, b), a, b) {
			lemma : a # Domain(Functionator{F}(a, b)) {
				element x from goal
				x @ a | assumption
				F(x) @ b | is_functionally_closed
				R(Functionator{F}(a, b), x, F(x)) | relationator_related
				x @ Domain(Functionator{F}(a, b)) | left_in_domain
			}

			| is_serial
		}
	}

	lemma : IsFunction(Functionator{F}(a, b), a, b) -> IsFunctionallyClosed{F}(a, b) {
		IsFunction(Functionator{F}(a, b), a, b) | assumption

		lemma : [x @ a] F(x) @ b {
			element x from goal
			x @ a | assumption
			Functionator{F}(a, b) . x @ b | function_in_bound
			R(Functionator{F}(a, b), x, Functionator{F}(a, b) . x) | function_map
			F(x) @ b | relationator_related
		}

		| is_functionally_closed
	}
}

theorem functionator_map {F(1)} : [a][b](IsFunction(Functionator{F}(a, b), a, b) -> [x @ a] Functionator{F}(a, b) . x = F(x)) {
	element a, b from goal
	IsFunction(Functionator{F}(a, b), a, b) | assumption
	IsFunctionallyClosed{F}(a, b) | functionator_is_function
	
	element x from goal
	x @ a | assumption
	F(x) @ b | is_functionally_closed

	R(Functionator{F}(a, b) , x , F(x)) | relationator_related
	  Functionator{F}(a, b) . x = F(x)  | function_map
}