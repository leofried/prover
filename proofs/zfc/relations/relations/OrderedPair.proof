import zfc.axioms

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol

opaque function OP(a, b): Pair(Singleton(a), Pair(a, b))

opaque function Left(o): Object[:(k): Singleton(k) @ o](Union(o))

opaque function Right(o): Object[:(k): o = OP(Left(o), k)](Union(o))

theorem op_inj : [a][b][c][d](OP(a, b) = OP(c, d) -> a = c AND b = d) {
	element a, b, c, d from goal
	
	OP(a, b) = OP(c, d) | assumption

	lemma : a = c {
		lemma : Singleton(a) = Singleton(c) {
			lemma : Singleton(a) = Singleton(c) OR Singleton(a) = Pair(c, d) {
				Singleton(a) @ OP(a, b) | axiom_of_pairing
				             @ OP(c, d) | substitution

				Singleton(a) = Singleton(c) OR Singleton(a) = Pair(c, d) | axiom_of_pairing
			}

			lemma : Singleton(a) = Pair(c, d) -> Singleton(a) = Singleton(c) {
				Singleton(a) = Pair(c, d) | assumption
							 = Singleton(c) | pair_eq_singleton
			}

			| simple_cases : [Singleton(a) = Pair(c, d), Singleton(a) = Singleton(c)]
		}

		| singleton_inj
	}

	lemma : b = d {
		Pair(Singleton(a), Pair(a, b)) = Pair(Singleton(c), Pair(c, d)) | substitution
		                               = Pair(Singleton(a), Pair(c, d)) | substitution

		Pair(a, b) = Pair(c, d) | pair_inj_right
		           = Pair(a, d) | substitution

		| pair_inj_right
	}
}

theorem union_op : [a][b](Union(OP(a, b)) = Pair(a, b)) {
	element a, b from goal

	lemma : SimpleUnion(Singleton(a), Pair(a, b)) # Pair(a, b) {
		element x from goal
		x @ SimpleUnion(Singleton(a), Pair(a, b)) | assumption
		x @ Singleton(a) OR x @ Pair(a, b) | in_simple_union

		lemma : x @ Singleton(a) -> x @ Pair(a, b) {
			x @ Singleton(a) | assumption
			x = a | in_singleton
			x @ Pair(a, b) | axiom_of_pairing
		} 

		| simple_cases : [x @ Singleton(a), x @ Pair(a, b)]
	}

	lemma : Pair(a, b) # SimpleUnion(Singleton(a), Pair(a, b)) {
		element x from goal
		x @ Pair(a, b) | assumption
		x = a OR x = b | axiom_of_pairing

		lemma : x = a -> x @ SimpleUnion(Singleton(a), Pair(a, b)) {
			a @ Pair(a, b) | axiom_of_pairing
			a @ SimpleUnion(Singleton(a), Pair(a, b)) | in_simple_union
			x @ SimpleUnion(Singleton(a), Pair(a, b)) | assumption
		}

		lemma : x = b -> x @ SimpleUnion(Singleton(a), Pair(a, b)) {
			b @ Pair(a, b) | axiom_of_pairing
			b @ SimpleUnion(Singleton(a), Pair(a, b)) | in_simple_union
			x @ SimpleUnion(Singleton(a), Pair(a, b)) | assumption
		}

		| cases : [x = a, x = b, x @ SimpleUnion(Singleton(a), Pair(a, b))]
	}

	Union(OP(a, b)) = SimpleUnion(Singleton(a), Pair(a, b)) | simple_union_definition
	                = Pair(a, b) | double_inclusion
}

theorem left_op : [a][b](Left(OP(a, b)) = a) {
	element a, b from goal

	lemma : a @ Union(OP(a, b)) {
		a @ Pair(a, b) | axiom_of_pairing
		  @ Union(OP(a, b)) | union_op
	}

	Singleton(a) @ OP(a, b) |  axiom_of_pairing

	lemma : [x @ Union(OP(a, b))](Singleton(x) @ OP(a, b) -> x = a) {
		element x from goal
		x @ Union(OP(a, b)) | assumption
		Singleton(x) @ OP(a, b) | assumption
		Singleton(x) = Singleton(a) OR Singleton(x) = Pair(a, b) | axiom_of_pairing

		lemma : Singleton(x) = Singleton(a) -> x = a {
			Singleton(x) = Singleton(a) | assumption
			x = a | singleton_inj
		}

		lemma : Singleton(x) = Pair(a, b) -> x = a {
			Singleton(x) = Pair(a, b) | assumption
			x = a | pair_eq_singleton
		}

		x = a | cases : [Singleton(x) = Singleton(a), Singleton(x) = Pair(a, b), x = a]
	}

	| is_object
}

theorem right_op : [a][b](Right(OP(a, b)) = b) {
	element a, b from goal

	lemma : b @ Union(OP(a, b)) {
		b @ Pair(a, b) | axiom_of_pairing
		  @ Union(OP(a, b)) | union_op
	}

	OP(a, b) = OP(Left(OP(a, b)), b)  | left_op

	lemma : [x @ Union(OP(a, b))](OP(a, b) = OP(Left(OP(a, b)), x) -> x = b) {
		element x from goal
		x @ Union(OP(a, b)) | assumption
		OP(a, b) = OP(Left(OP(a, b)), x) | assumption
		x = b | op_inj
	}

	| is_object
}