import zfc {
	axioms
	relations
	numbers.naturals {
		Naturals
		axioms
		theorems {
			NaturalAddition
			NaturalMultiplication
			NaturalInequality
		}
	}
}

transparent predicate @  from ElementOfSymbol
transparent predicate R  from Related
transparent function  0  from EmptySet
transparent function  1  from 1n
transparent function  2  from 2n
transparent function  S  from Successor
transparent function  +  from +n+
transparent function  *  from *n*
transparent predicate <= from NaturalInequalitySymbol

opaque function NaturalDivides: Relationator[:(a, b): {c @ nat} a * c = b](nat, nat)

transparent predicate |0| NaturalDividesSymbol (a, b): R(NaturalDivides, a, b)

transparent predicate \ from NaturalDividesSymbol

theorem nat_div : [a @ nat][b @ nat](a \ b <-> {c @ nat} a * c = b) {
	element a from goal	a @ nat | assumption
	element b from goal b @ nat | assumption

	lemma : a \ b -> {c @ nat} a * c = b {
		a \ b | assumption
		{c @ nat} a * c = b | relationator_related
	}

	lemma : {c @ nat} a * c = b -> a \ b {
		{c @ nat} a * c = b | assumption
		a \ b | relationator_related
	}
}

theorem nat_div_refl : [a @ nat] a \ a {
	element a from goal	a @ nat | assumption
	1 @ nat | one_is_nat
	a * 1 = a | nat_mul_one
	a \ a | nat_div
}

theorem nat_div_trans : [a @ nat][b @ nat][c @ nat](a \ b AND b \ c -> a \ c) {
	element a from goal	a @ nat | assumption
	element b from goal	b @ nat | assumption
	element c from goal	c @ nat | assumption

	a \ b AND b \ c | assumption
	element d from {d @ nat} a * d = b | nat_div
	element e from {e @ nat} b * e = c | nat_div
	d * e @ nat | mul_is_nat

	a * (d * e) = a * d * e | nat_mul_assoc
				= b * e | substitution
				= c | substitution
	a \ c | nat_div
}

theorem nat_div_zero : [a @ nat] a \ 0 {
	element a from goal	a @ nat | assumption
	0 @ nat | zero_is_nat
	a * 0 = 0 | nat_mul_zero
	a \ 0 | nat_div
}

theorem nat_zero_div : [a @ nat](0 \ a -> a = 0) {
	element a from goal	a @ nat | assumption
	0 @ nat | zero_is_nat
	0 \ a | assumption
	element b from {b @ nat} 0 * b = a | nat_div
	a = 0 | nat_zero_mul
}

theorem nat_div_zero_or_le : [a @ nat][b @ nat](a \ b -> b = 0 OR a <= b) {
	1 @ nat | one_is_nat

	element a from goal	a @ nat | assumption
	element b from goal	b @ nat | assumption

	a \ b | assumption
	element c from {c @ nat} a * c = b | nat_div

	lemma : c = 0 -> b = 0 OR a <= b {
		b = a * c | truths
		  = a * 0 | assumption
		  = 0 | nat_mul_zero
	}

	lemma : {d @ nat} c = S(d) -> b = 0 OR a <= b {
		element d from {d @ nat} c = S(d) | assumption
		a * d @ nat | mul_is_nat

		b = a * c | truths
		  = a * S(d) | substitution
		  = a * (1 + d) | nat_one_add
		  = a * 1 + a * d | nat_mul_add
		  = a + a * d | nat_mul_one
		a <= b | nat_le
	}

	| nat_cases
}

theorem nat_div_one : [a @ nat](a \ 1 -> a = 1){
	1 @ nat | one_is_nat

	element a from goal	a @ nat | assumption
	
	a \ 1 | assumption
	
	1 != 0 | nat_zero_not_one
	a <= 1 | nat_div_zero_or_le

	lemma : a != 0 {
		0 \ 1 | assumption
		0 = 1 | nat_zero_div
		False | nat_zero_not_one
	}

	| nat_le_one
}

theorem nat_div_extend_right : [a @ nat][b @ nat][c @ nat](a \ b -> a \ b * c) {
	element a from goal	a @ nat | assumption
	element b from goal	b @ nat | assumption
	element c from goal	c @ nat | assumption
	b * c @ nat | mul_is_nat

	a \ b | assumption
	element d from {d @ nat} a * d = b | nat_div
	d * c @ nat | mul_is_nat

	a * (d * c) = a * d * c | nat_mul_assoc
				= b * c | substitution
	a \ b * c | nat_div
}

theorem nat_div_extend_left : [a @ nat][b @ nat][c @ nat](a \ b -> a \ c * b) {
	element a from goal	a @ nat | assumption
	element b from goal	b @ nat | assumption
	element c from goal	c @ nat | assumption

	a \ b | assumption
	  \ b * c | nat_div_extend_right
	  \ c * b | nat_mul_comm
}

theorem nat_div_cancel_left : [a @ nat](a = 0 OR [b @ nat][c @ nat](a * b \ a * c -> b \ c)) {
	element a from goal	a @ nat | assumption
	a != 0 | assumption
	
	element b from goal	b @ nat | assumption
	a * b @ nat | mul_is_nat

	element c from goal	c @ nat | assumption
	a * c @ nat | mul_is_nat

	a * b \ a * c | assumption
	element d from {d @ nat} a * b * d = a * c | nat_div
	b * d @ nat | mul_is_nat

	a * c = a * b * d | truths
		  = a * (b * d) | nat_mul_assoc
	b * d = c | nat_mul_cancel_left
	b \ c | nat_div
}

theorem nat_div_cancel_right : [a @ nat](a = 0 OR [b @ nat][c @ nat](b * a \ c * a -> b \ c)) {
	element a from goal	a @ nat | assumption
	a != 0 | assumption
	
	element b from goal	b @ nat | assumption
	element c from goal	c @ nat | assumption

	b * a \ c * a | assumption
	a * b \       | nat_mul_comm
	      \ a * c | nat_mul_comm
	b \ c | nat_div_cancel_left 
}

theorem nat_div_split : [a @ nat][b @ nat][c @ nat](a \ b + c -> (a \ b <-> a \ c)) {
	element a from goal	a @ nat | assumption

	lemma lema : [b @ nat][c @ nat](a \ b + c -> (a \ b -> a \ c)) {
		element b from goal b @ nat | assumption
		element c from goal c @ nat | assumption
		b + c @ nat | add_is_nat

		a \ b + c | assumption
		element d from {d @ nat} a * d = b + c | nat_div
		a * d @ nat | mul_is_nat

		a \ b | assumption
		element e from {e @ nat} a * e = b | nat_div
		a * e @ nat | mul_is_nat

		lemma : a = 0 -> a \ c {
			0 \ b + c | assumption
			0 = b + c | nat_zero_div
			a \ 0 | nat_div_zero
			  \ c | nat_add_to_zero_right
		}

		lemma : a != 0 -> a \ c {
			a != 0 | assumption

			a * d = b + c | truths
			      = a * e + c | substitution
			a * e <= a * d | nat_le
			e <= d | nat_le_cancel_mul_left
			element f from {f @ nat} e + f = d | nat_le
			a * f @ nat | mul_is_nat

			b + a * f = a * e + a * f | substitution
			          = a * (e + f) | nat_mul_add
			          = a * d | substitution
			          = b + c | substitution
			a * f = c | nat_add_cancel_left
			a \ c | nat_div
		}

		| simple_cases : [a = 0, a \ c]
	}

	element b from goal	b @ nat | assumption
	element c from goal	c @ nat | assumption

	a \ b + c | assumption
	  \ c + b | nat_add_comm

	lemma : a \ b -> a \ c {
		a \ b | assumption
		  \ c | lema
	}

	lemma : a \ c -> a \ b {
		a \ c | assumption
		  \ b | lema
	}
}
/*
theorem nat_div_is_pre_order : IsPreOrder(NaturalDivides, nat) {
	IsHomogeneousRelation(NaturalDivides, nat) | relationator_is_relation

	lemma : IsReflexive(NaturalDivides, nat) {
		lemma : [a @ nat] R(NaturalDivides, a, a) {
			element a from goal
			a @ nat | assumption
			a \ a | nat_div_refl
		}

		| is_reflexive
	}

	lemma : IsTransitive(NaturalDivides, nat) {
		lemma : [a][b][c](a \ b AND b \ c -> a \ c) {
			element a, b, c from goal
			a \ b AND b \ c | assumption
			a @ nat | left_in_bound
			b @ nat | left_in_bound
			c @ nat | right_in_bound
			a \ c | nat_div_trans
		}

		| is_transitive
	}
}