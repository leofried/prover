import zfc.axioms.*
import zfc.numbers.naturals.NaturalAdditionAxioms
import zfc.numbers.naturals.NaturalAdditionTheorems
import zfc.numbers.naturals.NaturalMultiplicationAxioms

theorem nat_zero_mul : [a](a @ nat -> 0 * a = 0) {
	0 @ nat | zero_is_nat

	lemma : 0 * 0 = 0 {
		0 * 0 = 0 | nat_mul_zero
	}

	lemma : [a](a @ nat -> 0 * a = 0 -> 0 * S(a) = 0) {
		element a from goal
		a @ nat | assumption

		0 * S(a) = 0 * a + 0 | nat_mul_succ
		         = 0 + 0 | assumption
		         = 0 | nat_add_zero
	}

	| nat_induction
}

theorem nat_succ_mul : [a](a @ nat -> [b](b @ nat -> S(a) * b = a * b + b)) {
	element a from goal
	a @ nat | assumption
	S(a) @ nat | nat_succ

	lemma : S(a) * 0 = a * 0 + 0 {
		0 @ nat | zero_is_nat

		S(a) * 0 = 0 | nat_mul_zero
		         = 0 + 0 | nat_add_zero
		         = a * 0 + 0 | nat_mul_zero
	}

	lemma : [b](b @ nat -> S(a) * b = a * b + b -> S(a) * S(b) = a * S(b) + S(b)){
		element b from goal
		b @ nat | assumption
		S(b) @ nat | nat_succ
		a * b @ nat | mul_is_nat

		S(a) * S(b) = S(a) * b + S(a) | nat_mul_succ
		            = a * b + b + S(a) | assumption
		            = a * b + (b + S(a)) | nat_add_assoc
		            = a * b + (a + S(b)) | nat_add_succ_comm
		            = a * b + a + S(b) | nat_add_assoc
		            = a * S(b) + S(b) | nat_mul_succ
	}

	| nat_induction
}

theorem nat_mul_comm : [a](a @ nat -> [b](b @ nat -> a * b = b * a)) {
	element a from goal
	a @ nat | assumption

	lemma : a * 0 = 0 * a {
		a * 0 = 0 | nat_mul_zero
		      = 0 * a | nat_zero_mul
	}

	lemma : [b](b @ nat -> a * b = b * a -> a * S(b) = S(b) * a){
		element b from goal
		b @ nat | assumption

		a * S(b) = a * b + a | nat_mul_succ
		         = b * a + a | assumption
		         = S(b) * a | nat_succ_mul
	}

	| nat_induction
}

theorem nat_mul_add : [a](a @ nat -> [b](b @ nat -> [c](c @ nat -> a * (b + c) = a * b + a * c))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption
	a * b @ nat | mul_is_nat

	lemma : a * (b + 0) = a * b + a * 0 {
		a * (b + 0) = a * b | nat_add_zero
		            = a * b + 0 | nat_add_zero
		            = a * b + a * 0 | nat_mul_zero
	}

	lemma : [c](c @ nat -> a * (b + c) = a * b + a * c -> a * (b + S(c)) = a * b + a * S(c) ){
		element c from goal
		c @ nat | assumption
		b + c @ nat | add_is_nat
		a * c @ nat | mul_is_nat

		a * (b + S(c)) = a * S(b + c) | nat_add_succ
		               = a * (b + c) + a | nat_mul_succ
		               = a * b + a * c + a | assumption
		               = a * b + (a * c + a) | nat_add_assoc
		               = a * b + a * S(c) | nat_mul_succ
	}

	| nat_induction
}

theorem nat_add_mul : [a](a @ nat -> [b](b @ nat -> [c](c @ nat -> (a + b) * c = a * c + b * c))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption
	a + b @ nat | add_is_nat

	element c from goal
	c @ nat | assumption

	(a + b) * c = c * (a + b) | nat_mul_comm
	            = c * a + c * b | nat_mul_add
	            = a * c + c * b | nat_mul_comm
	            = a * c + b * c | nat_mul_comm
}

theorem nat_mul_assoc : [a](a @ nat -> [b](b @ nat -> [c](c @ nat -> a * b * c = a * (b * c)))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption
	a * b @ nat | mul_is_nat

	lemma : a * b * 0 = a * (b * 0){
		a * b * 0 = 0 | nat_mul_zero
		          = a * 0 | nat_mul_zero
		          = a * (b * 0) | nat_mul_zero
	}

	lemma : [c](c @ nat -> a * b * c = a * (b * c) -> a * b * S(c) = a * (b * S(c))) {
		element c from goal
		c @ nat | assumption
		b * c @ nat | mul_is_nat

		a * b * S(c) = a * b * c + a * b | nat_mul_succ
		             = a * (b * c) + a * b | assumption
		             = a * (b * c + b) | nat_mul_add
		             = a * (b * S(c)) | nat_mul_succ
	}

	| nat_induction
}

theorem nat_mul_paren_comm_left : [a](a @ nat -> [b](b @ nat -> [c](c @ nat -> a * (b * c) = b * (a * c)))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption

	element c from goal
	c @ nat | assumption

	a * (b * c) = a * b * c | nat_mul_assoc
	            = b * a * c | nat_mul_comm
	            = b * (a * c) | nat_mul_assoc
}

theorem nat_mul_paren_comm_right : [a](a @ nat -> [b](b @ nat -> [c](c @ nat -> a * b * c = a * c * b))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption

	element c from goal
	c @ nat | assumption

	a * b * c = a * (b * c) | nat_mul_assoc
	          = a * (c * b) | nat_mul_comm
	          = a * c * b | nat_mul_assoc
}

theorem nat_mul_to_zero : [a](a @ nat -> [b](b @ nat -> a * b = 0 -> a = 0 OR b = 0)) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption
	a * b = 0 | assumption

	b = 0 -> a = 0 OR b = 0 | expand_or_right

	lemma : {c}(c @ nat AND b = S(c)) -> a = 0 OR b = 0 {
		element c from {c}(c @ nat AND b = S(c)) | assumption
		a * c @ nat | mul_is_nat

		0 = a * b | truths
	      = a * S(c) | substitution
	      = a * c + a | nat_mul_succ

		a = 0 | nat_add_to_zero_right
	}

	a = 0 OR b = 0 | nat_cases
}

theorem nat_not_mul_to_zero : [a](a @ nat -> [b](b @ nat -> (a * b != 0 <-> a != 0 AND b != 0))) {
	element a from goal
	a @ nat | assumption

	element b from goal
	b @ nat | assumption

	lemma : a * b != 0 -> a != 0 AND b != 0 {
		a * b != 0 | assumption

		lemma : a != 0 {
			a * b = 0 * b | assumption
			      = 0 | nat_zero_mul
			False | truths
			| explosion
		}

		lemma : b != 0 {
			a * b = a * 0 | assumption
			      = 0 | nat_mul_zero
			False | truths
			| explosion
		}
	}

	lemma : a != 0 AND b != 0 -> a * b != 0 {
		a != 0 AND b != 0 | assumption
		NOT (a = 0 OR b = 0) | not_or

		a * b = 0 | assumption
		a = 0 OR b = 0 | nat_mul_to_zero

		False | truths
	}
}

theorem nat_mul_cancel_left : [a](a @ nat -> a != 0 -> [b](b @ nat -> [c](c @ nat -> a * b = a * c -> b = c))) {
	element a from goal
	a @ nat | assumption
	a != 0 | assumption

	lemma : [c](c @ nat -> a * 0 = a * c -> 0 = c) {
		element c from goal
		c @ nat | assumption

		a * c = a * 0 | assumption
		      = 0 | nat_mul_zero

		c = 0 | nat_mul_to_zero
	}

	lemma : [b](b @ nat -> [c](c @ nat -> a * b = a * c -> b = c) -> [c](c @ nat -> a * S(b) = a * c -> S(b) = c)) {
		element b from goal
		b @ nat | assumption
		S(b) @ nat | nat_succ
		a * b @ nat | mul_is_nat

		[c](c @ nat -> a * b = a * c -> b = c) | assumption

		element c from goal
		c @ nat | assumption

		a * S(b) = a * c | assumption
		
		lemma : c = 0 -> S(b) = c {
			a * S(b) = a * c | truths
			         = a * 0 | assumption
			         = 0 | nat_mul_zero
			         = S(b) | nat_mul_to_zero

			False | succ_not_zero
			S(b) = c | explosion
		}

		lemma : {d}(d @ nat AND c = S(d)) -> S(b) = c {
			element d from {d}(d @ nat AND c = S(d)) | assumption
			a * d @ nat | mul_is_nat

			a * b + a = a * S(b) | nat_mul_succ
			          = a * c | truths
			          = a * S(d) | substitution
			          = a * d + a | nat_mul_succ

			a * b = a * d | nat_add_cancel_right
			b = d | truths
			S(b) = S(d) | substitution
		}

		S(b) = c | nat_cases
	}

	| nat_induction
}

theorem nat_mul_cancel_right : [a](a @ nat -> a != 0 -> [b](b @ nat -> [c](c @ nat -> b * a = c * a -> b = c))) {
	element a from goal
	a @ nat | assumption
    a != 0 | assumption
	
	element b from goal
	b @ nat | assumption

	element c from goal
	c @ nat | assumption

	a * b = b * a | nat_mul_comm
	      = c * a | assumption
	      = a * c | nat_mul_comm

	b = c | nat_mul_cancel_left
}

theorem nat_mul_one : [a](a @ nat -> a * 1 = a) {
	element a from goal
	a @ nat | assumption

	0 @ nat | zero_is_nat

	a * 1 = a * S(0) | one_is_succ_zero
	      = a * 0 + a | nat_mul_succ
	      = 0 + a | nat_mul_zero
	      = a | nat_zero_add
}

theorem nat_one_mul : [a](a @ nat -> 1 * a = a) {
	element a from goal
	a @ nat | assumption
	1 @ nat | one_is_nat

	1 * a = a * 1 | nat_mul_comm
	      = a | nat_mul_one
}