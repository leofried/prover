import zfc {
	axioms
	relations
	numbers {
		helpers
		naturals
	}
}

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol
transparent function  0 from EmptySet
transparent function  S from Successor
transparent predicate C from Celated
transparent function  1 from 1n
transparent function  + from +n+

opaque function IntegerEquivalenceRelation: Celationator[:(a, b, c, d): a + d = b + c](nat, nat)

transparent function r from IntegerEquivalenceRelation

opaque function Int(a, b): Cart(r, a, b)

opaque function int: Partition(r)

theorem integers_are_equivalent : [a][b][c][d](C(r, a, b, c, d) <-> a @ nat AND b @ nat AND c @ nat AND d @ nat AND a + d = b + c) {
	
	| celationator_celated
}

theorem integers_are_equivalence_relation : IsEquivalenceCelation(r, nat, nat) {
	IsCelation(r, nat, nat) | celationator_is_celation

	lemma : IsReflexiveCelation(r, nat, nat) {
		lemma : [a @ nat][b @ nat] C(r, a, b, a, b) {
			element a from goal a @ nat | assumption
			element b from goal b @ nat | assumption
			a + b = b + a | nat_add_comm
			C(r, a, b, a, b) | integers_are_equivalent
		}

		| is_reflexive_celation
	}

	lemma : IsSymmetricCelation(r, nat, nat) {
		lemma : [a @ nat][b @ nat][c @ nat][d @ nat](C(r, a, b, c, d) -> C(r, c, d, a, b)) {
			element a from goal a @ nat | assumption
			element b from goal b @ nat | assumption
			element c from goal c @ nat | assumption
			element d from goal d @ nat | assumption

			C(r, a, b, c, d) | assumption

			c + b = b + c | nat_add_comm
			      = a + d | integers_are_equivalent
			      = d + a | nat_add_comm

			C(r, c, d, a, b) | integers_are_equivalent
		}

		| is_symmetric_celation
	}

	lemma : IsTransitiveCelation(r, nat, nat) {
		lemma : [a @ nat][b @ nat][c @ nat][d @ nat][e @ nat][f @ nat](C(r, a, b, c, d) AND C(r, c, d, e, f) -> C(r, a, b, e, f)) {
			element a from goal a @ nat | assumption
			element b from goal b @ nat | assumption
			element c from goal c @ nat | assumption
			element d from goal d @ nat | assumption
			element e from goal e @ nat | assumption
			element f from goal f @ nat | assumption

			C(r, a, b, c, d) AND C(r, c, d, e, f) | assumption

			a + f @ nat | add_is_nat
			b + e @ nat | add_is_nat

			a + f + d = (a + d) + f  | nat_add_paren_comm_right
			          = (b + c) + f  | integers_are_equivalent
			          =  b + (c + f) | nat_add_assoc
			          =  b + (d + e) | integers_are_equivalent
			          =  b + (e + d) | nat_add_comm
			          = (b + e) + d  | nat_add_assoc

			a + f = b + e | nat_add_cancel_right

			C(r, a, b, e, f) | integers_are_equivalent
		}

		| is_transitive_celation
	}
}

theorem integers_are_helper_partition : IsHelperPartition{Int}(int, r) {
	lemma : [x][y](Int(x, y) = Cart(r, x, y)) {
		element x, y from goal
	}

	| is_helper_partition
}

theorem int_nat : [x](x @ int <-> {a @ nat}{b @ nat} x = Int(a, b)) {
	IsEquivalenceCelation(r, nat, nat) | integers_are_equivalence_relation
	[x](x @ int <-> {a @ nat}{b @ nat} x = Int(a, b)) | in_cartition
}

theorem int_equiv : [a @ nat][b @ nat][c @ nat][d @ nat](a + d = b + c <-> Int(a, b) = Int(c, d)) {
	element a from goal a @ nat | assumption
	element b from goal b @ nat | assumption
	element c from goal c @ nat | assumption
	element d from goal d @ nat | assumption

	IsEquivalenceRelation(r, CP(nat, nat)) | integers_are_equivalence_relation

	lemma : a + d = b + c -> Int(a, b) = Int(c, d) {
		a + d = b + c | assumption
		C(r, a, b, c, d) | integers_are_equivalent
		Int(a, b) = Int(c, d) | cart_eq
	}

	lemma : Int(a, b) = Int(c, d) -> a + d = b + c {
		Int(a, b) = Int(c, d) | assumption
		C(r, a, b, c, d) | cart_eq
		a + d = b + c | integers_are_equivalent
	}
}

opaque function 0z: Int(0, 0)

theorem zero_is_int : 0z @ int {
	0 @ nat | zero_is_nat
	0z @ int | int_nat
}

theorem int_is_zero : [a @ nat][b @ nat](a = b <-> Int(a, b) = 0z) {
	element a from goal a @ nat | assumption
	element b from goal b @ nat | assumption
	0 @ nat | zero_is_nat

	lemma : a = b -> Int(a, b) = 0z {
		a + 0 = b + 0 | assumption
		
		| int_equiv
	}

	lemma : Int(a, b) = 0z -> a = b {
		Int(a, b) = Int(0, 0) | assumption

		a = a + 0 | nat_add_zero
		  = b + 0 | int_equiv
		  = b | nat_add_zero
	}
}

opaque function 1z: Int(1, 0)

theorem one_is_int : 1z @ int {
	0 @ nat | zero_is_nat
	1 @ nat | one_is_nat
	
	1z @ int | int_nat
}

theorem int_is_one : [a @ nat][b @ nat](a = S(b) <-> Int(a, b) = 1z) {
	element a from goal a @ nat | assumption
	element b from goal b @ nat | assumption
	0 @ nat | zero_is_nat
	1 @ nat | one_is_nat

	lemma : a = S(b) -> Int(a, b) = 1z {
		a + 0 = a | nat_add_zero
		      = S(b) | assumption
		      = b + 1 | nat_add_one

		| int_equiv
	}

	lemma : Int(a, b) = 1z -> a = S(b) {
		Int(a, b) = Int(1, 0) | assumption

		a = a + 0 | nat_add_zero
		  = b + 1 | int_equiv
		  = S(b) | nat_add_one
	}
}

theorem int_zero_not_one : 0z != 1z {
	0 @ nat | zero_is_nat
	0 != S(0) | succ_not_zero
	
	0z = Int(0, 0) | int_is_zero
	  != 1z | int_is_one
}