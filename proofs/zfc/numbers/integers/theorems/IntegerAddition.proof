import zfc {
	axioms
	numbers {
		naturals
		integers {
			Integers
			axioms.IntegerAdditionAxioms
		}
	}
}

transparent predicate @ from ElementOfSymbol
transparent function  0 from EmptySet
transparent function  1 from 1n
transparent function  + from +n+
transparent function ++ from +z+

theorem int_add_comm : [x @ int][y @ int] x ++ y = y ++ x {
	element x from goal x @ int | assumption
	element a, b from {a @ nat}{b @ nat} x = Int(a, b) | int_nat

	element y from goal y @ int | assumption
	element c, d from {c @ nat}{d @ nat} y = Int(c, d) | int_nat

	x ++ y = Int(a, b) ++ Int(c, d) | substitution
	       = Int(a + c, b + d) | int_add
	       = Int(c + a, b + d) | nat_add_comm
	       = Int(c + a, d + b) | nat_add_comm
	       = Int(c, d) ++ Int(a, b) | int_add
	       = y ++ x | substitution
}

theorem int_add_assoc : [x @ int][y @ int][z @ int] x ++ y ++ z = x ++ (y ++ z) {
	element x from goal x @ int | assumption
	element a, b from {a @ nat}{b @ nat} x = Int(a, b) | int_nat

	element y from goal y @ int | assumption
	element c, d from {c @ nat}{d @ nat} y = Int(c, d) | int_nat

	element z from goal z @ int | assumption
	element e, f from {e @ nat}{f @ nat} z = Int(e, f) | int_nat

	a + c @ nat | add_is_nat
	b + d @ nat | add_is_nat
	c + e @ nat | add_is_nat
	d + f @ nat | add_is_nat

	x ++ y ++ z = Int(a, b) ++ Int(c, d) ++ Int(e, f) | substitution
	            = Int(a + c, b + d) ++ Int(e, f) | int_add
	            = Int(a + c + e, b + d + f) | int_add
	            = Int(a + (c + e), b + d + f) | nat_add_assoc
	            = Int(a + (c + e), b + (d + f)) | nat_add_assoc
	            = Int(a, b) ++ Int(c + e, d + f) | int_add
	            = Int(a, b) ++ (Int(c, d) ++ Int(e, f)) | int_add
	            = x ++ (y ++ z) | substitution
}

theorem int_add_zero : [x @ int] x ++ 0z = x {
	element x from goal x @ int | assumption
	element a, b from {a @ nat}{b @ nat} x = Int(a, b) | int_nat

	0 @ nat | zero_is_nat

	x ++ 0z = Int(a, b) ++ 0z | substitution
	        = Int(a, b) ++ Int(0, 0) | int_is_zero
	        = Int(a + 0, b + 0) | int_add
	        = Int(a, b + 0) | nat_add_zero
	        = Int(a, b) | nat_add_zero
	        = x | substitution
}

theorem int_zero_add : [x @ int] 0z ++ x = x {
	element x from goal x @ int | assumption
	element a, b from {a @ nat}{b @ nat} x = Int(a, b) | int_nat

	0z @ int | zero_is_int

	0z ++ x = x ++ 0z | int_add_comm
	        = x | int_add_zero
}