import zfc {
	axioms
	relations
	numbers.helpers.HelperPartition
}

transparent predicate @ from ElementOfSymbol
transparent predicate C from Celated
transparent function .. from BinaryMapSymbol

opaque predicate IsHelperBinaryClosed{A(4), B(4)}(a, b): 
	[x @ a][y @ b][w @ a][z @ b](A(x, y, w, z) @ a AND B(x, y, w, z) @ b)
	| is_helper_binary_closed

opaque predicate IsHelperBinaryWellDefined{A(4), B(4)}(r, a, b): 
	[x @ a][y @ b][w @ a][z @ b][s @ a][t @ b][u @ a][v @ b](
			C(r, x, y, w, z) AND C(r, s, t, u, v)
		->
			C(r, A(x, y, s, t), B(x, y, s, t), A(w, z, u, v), B(w, z, u, v))
	)
	| is_helper_binary_well_defined

opaque function HelperBinary{A(4), B(4)}(r):
	BinaryFunctionator{:(j, k): Cart(r,
		A(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))),
		B(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))))
	}(Partition(r))

transparent predicate IsHelperBinary{P(2), A(4), B(4)}(p, r, a, b):
	IsHelperPartition{P}(p, r) AND
	IsEquivalenceCelation(r, a, b) AND
	IsHelperBinaryClosed{A, B}(a, b) AND
	IsHelperBinaryWellDefined{A, B}(r, a, b)

theorem helper_binary {P(2), A(4), B(4)} :
	[p][r][a][b](
			IsHelperBinary{P, A, B}(p, r, a, b)
		->
				IsBinaryFunction(HelperBinary{A, B}(r), p)
			AND
				[x @ a][y @ b][w @ a][z @ b](
					P(x, y) ..(HelperBinary{A, B}(r)) P(w, z)
				=
					P(A(x, y, w, z), B(x, y, w, z))
				)
	)
{

	element p, r, a, b from goal
	IsHelperBinary{P, A, B}(p, r, a, b) | assumption

	lemma : IsBinaryFunction(HelperBinary{A, B}(r), Partition(r)) {
		lemma : IsBinaryFunctionallyClosed{:(j, k): Cart(r, A(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))), B(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))))}(Partition(r)) {
			lemma : [j @ Partition(r)][k @ Partition(r)] Cart(r, A(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))), B(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k)))) @ Partition(r) {
				element j from goal j @ Partition(r) | assumption
				element k from goal k @ Partition(r) | assumption

				for i : [j, k] {
					Choice(i) @ CP(a, b) | choice_in_partition
					Left(Choice(i)) @ a | left_in_cp
					Right(Choice(i)) @ b | right_in_cp
				}
				
				A(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))) @ a | is_helper_binary_closed
				B(Left(Choice(j)), Right(Choice(j)), Left(Choice(k)), Right(Choice(k))) @ b | is_helper_binary_closed
				| in_cartition
			}

			| is_binary_functionally_closed
		}

		| binary_functionator_is_function
	}

	IsBinaryFunction(HelperBinary{A, B}(r), p) | is_helper_partition

	lemma : [x @ a][y @ b][w @ a][z @ b](P(x, y) ..(HelperBinary{A, B}(r)) P(w, z) = P(A(x, y, w, z), B(x, y, w, z))) {
		element x from goal x @ a | assumption
		element y from goal y @ b | assumption
		element w from goal w @ a | assumption
		element z from goal z @ b | assumption

		Cart(r, x, y) @ Partition(r) | in_cartition
		Cart(r, w, z) @ Partition(r) | in_cartition

		C(r, x, y, Left(Choice(Cart(r, x, y))), Right(Choice(Cart(r, x, y)))) | choice_cart
		C(r, w, z, Left(Choice(Cart(r, w, z))), Right(Choice(Cart(r, w, z)))) | choice_cart

		Left (Choice(Cart(r, x, y))) @ a | right_left_in_bound
		Right(Choice(Cart(r, x, y))) @ b | right_right_in_bound
		Left (Choice(Cart(r, w, z))) @ a | right_left_in_bound
		Right(Choice(Cart(r, w, z))) @ b | right_right_in_bound

		C(r, A(x, y, w, z), B(x, y, w, z), A(Left(Choice(Cart(r, x, y))), Right(Choice(Cart(r, x, y))), Left(Choice(Cart(r, w, z))), Right(Choice(Cart(r, w, z)))), B(Left(Choice(Cart(r, x, y))), Right(Choice(Cart(r, x, y))), Left(Choice(Cart(r, w, z))), Right(Choice(Cart(r, w, z))))) | is_helper_binary_well_defined
	
		  P(x, y) ..(HelperBinary{A, B}(r)) P(w, z)
		= Cart(r, x, y) ..(HelperBinary{A, B}(r)) P(w, z) | is_helper_partition
		= Cart(r, x, y) ..(HelperBinary{A, B}(r)) Cart(r, w, z) | is_helper_partition
		= Cart(r, A(Left(Choice(Cart(r, x, y))), Right(Choice(Cart(r, x, y))), Left(Choice(Cart(r, w, z))), Right(Choice(Cart(r, w, z)))), B(Left(Choice(Cart(r, x, y))), Right(Choice(Cart(r, x, y))), Left(Choice(Cart(r, w, z))), Right(Choice(Cart(r, w, z))))) | binary_functionator_map
		= Cart(r, A(x, y, w, z), B(x, y, w, z)) | cart_eq
		= P(A(x, y, w, z), B(x, y, w, z)) | is_helper_partition
	}
}