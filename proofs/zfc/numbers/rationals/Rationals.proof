/*import zfc.axioms.*
import zfc.relations.*
import zfc.numbers.helpers.*
import zfc.numbers.naturals.*
import zfc.numbers.integers.*

function RationalEquivalenceRelation(0) {
	definition: Separate[:(k): Left(Left(k)) ** Right(Right(k)) = Left(Right(k)) ** Right(Left(k))](CP(CP(int, int), CP(int, int)))
}

function Rat(2) {
	definition(a, b): Part(RationalEquivalenceRelation, OP(a, b))
}

function rat {
	definition: Partition(RationalEquivalenceRelation)
}

theorem rationals_are_equivalent : [o][p](Equiv(RationalEquivalenceRelation, o, p) <-> o @ CP(int, int) AND p @ CP(int, int) AND Left(o) ** Right(p) = Left(p) ** Right(o)) {
	element o, p from goal

	lemma : IsRelation(RationalEquivalenceRelation, CP(int, int), CP(int, int)) {
		IsRelation(Separate[:(k): Left(Left(k)) ** Right(Right(k)) = Left(Right(k)) ** Right(Left(k))](CP(CP(int, int), CP(int, int))), CP(int, int), CP(int, int)) | separation_is_relation
		IsRelation(RationalEquivalenceRelation, CP(int, int), CP(int, int)) | definition
	}

	lemma : Equiv(RationalEquivalenceRelation, o, p) -> o @ CP(int, int) AND p @ CP(int, int) AND Left(o) ** Right(p) = Left(p) ** Right(o) {
		Equiv(RationalEquivalenceRelation, o, p) | assumption
		OP(o, p) @ RationalEquivalenceRelation | equiv_op
		         @ Separate[:(k): Left(Left(k)) ** Right(Right(k)) = Left(Right(k)) ** Right(Left(k))](CP(CP(int, int), CP(int, int))) | definition
		o @ CP(int, int) AND p @ CP(int, int) | op_in_relation

		Left(o) ** Right(p) = Left(Left(OP(o, p))) ** Right(p) | left_op
		                    = Left(Left(OP(o, p))) ** Right(Right(OP(o, p))) | right_op
		                    = Left(Right(OP(o, p))) ** Right(Left(OP(o, p))) | axiom_of_separation
	                        = Left(Right(OP(o, p))) ** Right(o) | left_op
	                        = Left(p) ** Right(o) | right_op
	}

	lemma : o @ CP(int, int) AND p @ CP(int, int) AND Left(o) ** Right(p) = Left(p) ** Right(o) -> Equiv(RationalEquivalenceRelation, o, p) {
		o @ CP(int, int) AND p @ CP(int, int) AND Left(o) ** Right(p) = Left(p) ** Right(o) | assumption
		OP(o, p) @ CP(CP(int, int), CP(int, int)) | op_in_cp

		Left(Left(OP(o, p))) ** Right(Right(OP(o, p))) = Left(o) ** Right(Right(OP(o, p))) | left_op
		                                               = Left(o) ** Right(p) | right_op
		                                               = Left(p) ** Right(o) | truths
		                                               = Left(p) ** Right(Left(OP(o, p))) | left_op
		                                               = Left(Right(OP(o, p))) ** Right(Left(OP(o, p))) | right_op

		OP(o, p) @ Separate[:(k): Left(Left(k)) ** Right(Right(k)) = Left(Right(k)) ** Right(Left(k))](CP(CP(int, int), CP(int, int))) | axiom_of_separation
		         @ RationalEquivalenceRelation | definition
		Equiv(RationalEquivalenceRelation, o, p) | equiv_op
	}
}

theorem rationals_are_equivalence_relation : IsEquivalenceRelation(RationalEquivalenceRelation, CP(int, int)) {
	lemma : IsRelation(RationalEquivalenceRelation, CP(int, int), CP(int, int)) {
		IsRelation(Separate[:(k): Left(Left(k)) ** Right(Right(k)) = Left(Right(k)) ** Right(Left(k))](CP(CP(int, int), CP(int, int))), CP(int, int), CP(int, int)) | separation_is_relation
		IsRelation(RationalEquivalenceRelation, CP(int, int), CP(int, int)) | definition
	}

	lemma : IsReflexive(RationalEquivalenceRelation, CP(int, int)) {
		lemma : [o](o @ CP(int, int) -> Equiv(RationalEquivalenceRelation, o, o)) {
			element o from goal
			o @ CP(int, int) | assumption
			Left(o) ** Right(o) = Left(o) ** Right(o) | truths
			Equiv(RationalEquivalenceRelation, o, o) | rationals_are_equivalent
		}

		| is_reflexive
	}

	lemma : IsSymmetric(RationalEquivalenceRelation, CP(int, int)) {
		lemma : [o][p](Equiv(RationalEquivalenceRelation, o, p) -> Equiv(RationalEquivalenceRelation, p, o)) {
			element o, p from goal
			Equiv(RationalEquivalenceRelation, o, p) | assumption
			o @ CP(int, int) AND p @ CP(int, int) | rationals_are_equivalent
			Left(o) ** Right(p) = Left(p) ** Right(o) | rationals_are_equivalent
			Equiv(RationalEquivalenceRelation, p, o) | rationals_are_equivalent
		}

		| is_symmetric
	}

	lemma : IsTransitive(RationalEquivalenceRelation, CP(int, int)) {
		lemma : [o][p][q](Equiv(RationalEquivalenceRelation, o, p) AND Equiv(RationalEquivalenceRelation, p, q) -> Equiv(RationalEquivalenceRelation, o, q)) {
			element o, p, q from goal
			Equiv(RationalEquivalenceRelation, o, p) AND Equiv(RationalEquivalenceRelation, p, q) | assumption
			o @ CP(int, int) AND p @ CP(int, int) | rationals_are_equivalent
			p @ CP(int, int) AND q @ CP(int, int) | rationals_are_equivalent

			lemma : Left(o) ** Right(q) = Left(q) ** Right(o) {
				Left(o) @ int AND Right(o) @ int | in_cp
				Left(p) @ int AND Right(p) @ int | in_cp
				Left(q) @ int AND Right(q) @ int | in_cp

				lemma : Left(o) ** Right(q) ** Right(p) = Left(q) ** Right(o) ** Right(p) {
					Left(o) ** Right(q) ** Right(p) = Left(o) ** Right(p) ** Right(q) | int_mul_paren_comm_right
					                                = Left(p) ** Right(o) ** Right(q) | rationals_are_equivalent
				                                    = Left(p) ** Right(q) ** Right(o) | int_mul_paren_comm_right
				                                    = Left(q) ** Right(p) ** Right(o) | rationals_are_equivalent
				                                    = Left(q) ** Right(o) ** Right(p) | int_mul_paren_comm_right
				}

				Left(o) ** Right(q) @ int | mul_is_int
				Left(q) ** Right(o) @ int | mul_is_int

				Left(o) ** Right(q) = Left(q) ** Right(o) | int_mul_cancel_right
			}

			| rationals_are_equivalent
		}

		| is_transitive
	}
}

theorem rationals_are_helper_partition : IsHelperPartition{Rat}(rat, RationalEquivalenceRelation, int) {
	rat = Partition(RationalEquivalenceRelation) | definition

	lemma : [x][y](Rat(x, y) = Part(RationalEquivalenceRelation, OP(x, y))) {
		element x, y from goal
		Rat(x, y) = Part(RationalEquivalenceRelation, OP(x, y)) | definition
	}

	| is_helper_partition
}

theorem rat_to_int : [x](x @ rat -> {a}{b}(a @ int AND b @ int AND x = Rat(a, b))) {
	IsEquivalenceRelation(RationalEquivalenceRelation, CP(int, int)) | rationals_are_equivalence_relation

	element x from goal
	x @ rat | assumption
	  @ Partition(RationalEquivalenceRelation) | definition
	element o from {o}(o @ CP(int, int) AND x = Part(RationalEquivalenceRelation, o)) | in_partition

	Left(o) @ int AND Right(o) @ int AND IsOP(o) | in_cp
	use Left(o)
	use Right(o)

	Rat(Left(o), Right(o)) = Part(RationalEquivalenceRelation, OP(Left(o), Right(o))) | definition
	                       = Part(RationalEquivalenceRelation, o) | op_left_right
}

theorem int_to_rat : [a][b](a @ int AND b @ int -> Rat(a, b) @ rat) {
	IsEquivalenceRelation(RationalEquivalenceRelation, CP(int, int)) | rationals_are_equivalence_relation

	element a, b from goal
	a @ int AND b @ int | assumption
	OP(a, b) @ CP(int, int) | op_in_cp
	
	Part(RationalEquivalenceRelation, OP(a, b)) @ Partition(RationalEquivalenceRelation) | part_in_partition
	                                            @ rat | definition
	                                  Rat(a, b) @ rat | definition
}

/*
function 00 {
	definition: Rat(0, 0)
}

theorem zero_is_rat : 00 @ rat {
	0 @ int | zero_is_int
	Rat(0, 0) @ rat | int_to_rat
	00 @ rat | definition
}

theorem rat_is_zero : [a][b](a @ int AND b @ int -> (a = b <-> Rat(a, b) = 00)) {
	element a, b from goal
	a @ int AND b @ int | assumption
	OP(a, b) @ CP(int, int) | op_in_cp
	0 @ int | zero_is_int
	OP(0, 0) @ CP(int, int) | op_in_cp

	IsEquivalenceRelation(RationalEquivalenceRelation, CP(int, int)) | rationals_are_equivalence_relation

	lemma : a = b -> Rat(a, b) = 00 {
		Left(OP(a, b)) + Right(OP(0, 0)) = a + Right(OP(0, 0)) | left_op
		                                 = a + 0 | right_op
		                                 = 0 + a | int_add_comm
		                                 = 0 + b | assumption
		                                 = 0 + Right(OP(a, b)) | right_op
		                                 = Left(OP(0, 0)) + Right(OP(a, b)) | left_op

		Equiv(RationalEquivalenceRelation, OP(a, b), OP(0, 0)) | rationals_are_equivalent

		Rat(a, b) = Part(RationalEquivalenceRelation, OP(a, b)) | definition
				  = Part(RationalEquivalenceRelation, OP(0, 0)) | equiv_eq_part
				  = Rat(0, 0) | definition
				  = 00 | definition
	}

	lemma : Rat(a, b) = 00 -> a = b {
		Part(RationalEquivalenceRelation, OP(a, b)) = Rat(a, b) | definition
																 = 00 | assumption
																 = Rat(0, 0) | definition
																 = Part(RationalEquivalenceRelation, OP(0, 0)) | definition
	
		Equiv(RationalEquivalenceRelation, OP(a, b), OP(0, 0)) | eq_part_equiv

		a = a + 0 | int_add_zero
		  = a + Right(OP(0, 0)) | right_op
		  = Left(OP(a, b)) + Right(OP(0, 0)) | left_op
		  = Left(OP(0, 0)) + Right(OP(a, b)) | rationals_are_equivalent
		  = Left(OP(0, 0)) + b | right_op
		  = 0 + b | left_op
		  = b | int_zero_add
	}
}

function 11 {
	definition: Rat(1, 0)
	theorem: rat_is_one
}

theorem one_is_rat : 11 @ rat {
	1 @ int | one_is_int
	0 @ int | zero_is_int
	Rat(1, 0) @ rat | int_to_rat
	11 @ rat | rat_is_one
}