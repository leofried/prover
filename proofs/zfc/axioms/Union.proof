import zfc.axioms {
	EmptySet
	Extensionality
	Pairing
	Power
	Propositions
	Subset
}

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol
transparent function 0 from EmptySet

opaque function Union(a)

axiom axiom_of_union : [a][x](x @ Union(a) <-> {b}(x @ b AND b @ a))

theorem double_union : [a][b][c](a @ Union(b) AND b @ c -> a @ Union(Union(c))) {
	element a, b, c from goal
	a @ Union(b) AND b @ c | assumption
	element d from {d}(a @ d AND d @ b) | axiom_of_union
	d @ Union(c) | axiom_of_union
	a @ Union(Union(c)) | axiom_of_union
}

theorem subset_union : [a] [b @ a] b # Union(a) {
	element a, b from goal
	b @ a | assumption
	element x from goal
	x @ b | assumption
	x @ Union(a) |axiom_of_union
}

theorem union_singleton : [a] Union(Singleton(a)) = a {
	element a from goal

	lemma : Union(Singleton(a)) # a {
		element x from goal
		x @ Union(Singleton(a)) | assumption
		element b from {b}(x @ b AND b @ Singleton(a)) | axiom_of_union
		a = b | in_singleton
		x @ a | substitution
	}

	lemma : a # Union(Singleton(a)) {
		element x from goal
		x @ a | assumption
		a @ Singleton(a) | in_singleton
		x @ Union(Singleton(a)) |axiom_of_union
	}

	| double_inclusion
}

theorem union_power : [a](Union(Power(a)) = a) {
	element a from goal

	lemma : Union(Power(a)) # a {
		element x from goal
		x @ Union(Power(a)) | assumption
		element b from {b}(x @ b AND b @ Power(a)) | axiom_of_union
		b # a | axiom_of_power
		x @ a | in_superset
	}

	lemma : a # Union(Power(a)) {
		element x from goal
		x @ a | assumption
		a @ Power(a) | set_in_power_set
		x @ Union(Power(a)) |axiom_of_union
	}

	Union(Power(a)) = a | double_inclusion
}

theorem union_empty_set : Union(0) = 0 {
	lemma : [x] NOT x @ Union(0) {
		element x from goal
		x @ Union(0) | assumption
		element y from {y} (x @ y AND y @ 0) | axiom_of_union
		False | empty_set
	}

	| empty_set
}