import zfc.axioms.Extensionality
import zfc.axioms.Pairing
import zfc.axioms.Propositions
import zfc.axioms.Separation
import zfc.axioms.Subset
import zfc.axioms.Union

function SimpleUnion(2) {
	definition(a, b): Union(Pair(a, b))
	theorem: simple_union_definition
}

function SimpleIntersection(2) {
	definition(a, b): Separate[:(k): k @ b](a)
}

theorem in_simple_union : [a][b][x](x @ SimpleUnion(a, b) <-> x @ a OR x @ b){
	element a, b, x from goal

	lemma : x @ SimpleUnion(a, b) -> x @ a OR x @ b {
		x @ SimpleUnion(a, b) | assumption
		  @ Union(Pair(a, b)) | simple_union_definition

		element c from {c}(x @ c AND c @ Pair(a, b)) | axiom_of_union
		c = a OR c = b | axiom_of_pairing

		lemma : c = a -> x @ a OR x @ b {
			x @ a | assumption
		}

		lemma : c = b -> x @ a OR x @ b {
			x @ b | assumption
		}

		x @ a OR x @ b | cases : [c = a, c = b, x @ a OR x @ b]
	}

	lemma : x @ a OR x @ b -> x @ SimpleUnion(a, b) {
		x @ a OR x @ b | assumption

		lemma : x @ a -> x @ SimpleUnion(a, b) {
			x @ a | assumption
			a @ Pair(a, b) | axiom_of_pairing

			x @ Union(Pair(a, b)) | in_union
			  @ SimpleUnion(a, b) | simple_union_definition
		}

		lemma : x @ b -> x @ SimpleUnion(a, b) {
			x @ b | assumption
			b @ Pair(a, b) | axiom_of_pairing

			x @ Union(Pair(a, b)) | in_union
			  @ SimpleUnion(a, b) | simple_union_definition
		}

		x @ SimpleUnion(a, b) | cases : [x @ a, x @ b, x @ SimpleUnion(a, b)]
	}
}

theorem in_simple_intersection : [a][b][x](x @ SimpleIntersection(a, b) <-> x @ a AND x @ b){
	element a, b, x from goal

	lemma : x @ SimpleIntersection(a, b) -> x @ a AND x @ b {
		x @ SimpleIntersection(a, b) | assumption
		  @ Separate[:(k): k @ b](a) | definition
		x @ a AND x @ b | axiom_of_separation
	}

	lemma : x @ a AND x @ b -> x @ SimpleIntersection(a, b) {
		x @ a AND x @ b | assumption
		x @ Separate[:(k): k @ b](a) | axiom_of_separation
		  @ SimpleIntersection(a, b) | definition
	}
}

theorem simple_union_symmetric : [a][b](SimpleUnion(a, b) = SimpleUnion(b, a)) {
	element a, b from goal

	SimpleUnion(a, b) = Union(Pair(a, b)) | simple_union_definition
	                  = Union(Pair(b, a)) | pair_symmetric
	                  = SimpleUnion(b, a) | simple_union_definition
}

theorem simple_intersection_symmetric : [a][b](SimpleIntersection(a, b) = SimpleIntersection(b, a)) {
	element a, b from goal

	lemma : SimpleIntersection(a, b) # SimpleIntersection(b, a) {
		element x from goal
		x @ SimpleIntersection(a, b) | assumption
		x @ a AND x @ b | in_simple_intersection
		x @ SimpleIntersection(b, a) | in_simple_intersection
	}

	lemma : SimpleIntersection(b, a) # SimpleIntersection(a, b) {
		element x from goal
		x @ SimpleIntersection(b, a) | assumption
		x @ b AND x @ a | in_simple_intersection
		x @ SimpleIntersection(a, b) | in_simple_intersection
	}

	SimpleIntersection(a, b) = SimpleIntersection(b, a) | double_inclusion
}

theorem left_subset_simple_union : [a][b] a # SimpleUnion(a, b){
	element a, b, x from goal
	x @ a | assumption
	  @ SimpleUnion(a, b) | in_simple_union
}

theorem right_subset_simple_union : [a][b] b # SimpleUnion(a, b){
	element a, b, x from goal
	x @ b | assumption
	  @ SimpleUnion(a, b) | in_simple_union
}

theorem simple_intersection_subset_left : [a][b] SimpleIntersection(a, b) # a {
	element a, b, x from goal
	x @ SimpleIntersection(a, b) | assumption
	  @ a | in_simple_intersection
}

theorem simple_intersection_subset_right : [a][b] SimpleIntersection(a, b) # b {
	element a, b, x from goal
	x @ SimpleIntersection(a, b) | assumption
	  @ b | in_simple_intersection
}

theorem simple_union_set_eq_set : [a] SimpleUnion(a, a) = a {
	element a from goal

	lemma : SimpleUnion(a, a) # a {
	 	element x from goal
	 	x @ SimpleUnion(a, a) | assumption
	 	x @ a OR x @ a | in_simple_union
	 	x @ a | reduce_or_one
	}

	lemma : a # SimpleUnion(a, a) {
	 	element x from goal
	 	x @ a | assumption
	 	x @ SimpleUnion(a, a) | in_simple_union
	}

	SimpleUnion(a, a) = a | double_inclusion
}

theorem simple_intersection_set_eq_set : [a] SimpleIntersection(a, a) = a {
	element a from goal

	lemma : SimpleIntersection(a, a) # a {
	 	element x from goal
	 	x @ SimpleIntersection(a, a) | assumption
	 	x @ a | in_simple_intersection
	}

	lemma : a # SimpleIntersection(a, a) {
	 	element x from goal
	 	x @ a | assumption
	 	x @ SimpleIntersection(a, a) | in_simple_intersection
	}

	SimpleIntersection(a, a) = a | double_inclusion
}

theorem simple_intersection_subset_simple_union : [a][b](SimpleIntersection(a, b) # SimpleUnion(a, b)) {
	element a, b, x from goal
	x @ SimpleIntersection(a, b) | assumption
	x @ a | in_simple_intersection
	x @ SimpleUnion(a, b) | in_simple_union
}