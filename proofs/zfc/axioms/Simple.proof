import zfc.axioms {
	EmptySet
	Extensionality
	Pairing
	Propositions
	Separation
	Subset
	Union
}

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol
transparent function 0 from EmptySet

opaque function SimpleUnion(a, b): Union(Pair(a, b)) | simple_union_definition

theorem in_simple_union : [a][b][x](x @ SimpleUnion(a, b) <-> x @ a OR x @ b){
	element a, b, x from goal

	lemma : x @ SimpleUnion(a, b) -> x @ a OR x @ b {
		x @ SimpleUnion(a, b) | assumption
		  @ Union(Pair(a, b)) | simple_union_definition

		element c from {c}(x @ c AND c @ Pair(a, b)) | axiom_of_union
		c = a OR c = b | axiom_of_pairing

		lemma : c = a -> x @ a OR x @ b {
			x @ a | assumption
		}

		lemma : c = b -> x @ a OR x @ b {
			x @ b | assumption
		}

		| cases : [c = a, c = b, x @ a OR x @ b]
	}

	lemma : x @ a OR x @ b -> x @ SimpleUnion(a, b) {
		x @ a OR x @ b | assumption

		lemma : x @ a -> x @ SimpleUnion(a, b) {
			x @ a | assumption
			a @ Pair(a, b) | axiom_of_pairing

			x @ Union(Pair(a, b)) | axiom_of_union
			  @ SimpleUnion(a, b) | simple_union_definition
		}

		lemma : x @ b -> x @ SimpleUnion(a, b) {
			x @ b | assumption
			b @ Pair(a, b) | axiom_of_pairing

			x @ Union(Pair(a, b)) | axiom_of_union
			  @ SimpleUnion(a, b) | simple_union_definition
		}

		| cases : [x @ a, x @ b, x @ SimpleUnion(a, b)]
	}
}

theorem simple_union_symmetric : [a][b](SimpleUnion(a, b) = SimpleUnion(b, a)) {
	element a, b from goal

	SimpleUnion(a, b) = Union(Pair(a, b)) | simple_union_definition
	                  = Union(Pair(b, a)) | pair_symmetric
	                  = SimpleUnion(b, a) | simple_union_definition
}

theorem left_subset_simple_union : [a][b] a # SimpleUnion(a, b){
	element a, b, x from goal
	x @ a | assumption
	  @ SimpleUnion(a, b) | in_simple_union
}

theorem right_subset_simple_union : [a][b] b # SimpleUnion(a, b){
	element a, b, x from goal
	x @ b | assumption
	  @ SimpleUnion(a, b) | in_simple_union
}

theorem simple_union_subset_eq_left : [a][b # a] SimpleUnion(a, b) = a {
	element a, b from goal
	b # a | assumption

	a # SimpleUnion(a, b) | left_subset_simple_union

	lemma : SimpleUnion(a, b) # a {
		element x from goal
		x @ SimpleUnion(a, b) | assumption
		x @ a OR x @ b | in_simple_union
		x @ b -> x @ a | truths
		x @ a | simple_cases : [x @ b, x @ a]
	}

	| double_inclusion
}

theorem simple_union_subset_eq_right : [a][b # a] SimpleUnion(b, a) = a {
	element a, b from goal
	b # a | assumption

	a = SimpleUnion(a, b) | simple_union_subset_eq_left
	  = SimpleUnion(b, a) | simple_union_symmetric 
}

theorem simple_union_empty_set_left : [a] SimpleUnion(0, a) = a {
	element a from goal
	0 # a | empty_set_subset
	| simple_union_subset_eq_right
}

theorem simple_union_empty_set_right : [a] SimpleUnion(a, 0) = a {
	element a from goal
	0 # a | empty_set_subset
	| simple_union_subset_eq_left
}

theorem simple_union_set_eq_set : [a] SimpleUnion(a, a) = a {
	element a from goal
	a # a | subset_reflexive
	| simple_union_subset_eq_left
}