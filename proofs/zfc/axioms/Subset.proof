import zfc.axioms.Extensionality

predicate #(2) {
	strength: 0
	sugar(a, b): [x](x @ a -> x @ b)
}

theorem double_inclusion : [a][b](a # b AND b # a -> a = b) {
	element a, b from goal
	a # b AND b # a | assumption

	lemma : [x](x @ a <-> x @ b) {
		element x from goal
		x @ a -> x @ b | truths
		x @ b -> x @ a | truths
	}

	a = b | axiom_of_extensionality
}

theorem subset_reflexive : [a][b](a = b -> a # b) {
	element a, b from goal
	a = b | assumption

	element x from goal
	x @ a | assumption
	x @ b | substitution
}

theorem subset_transitive : [a][b][c](a # b AND b # c -> a # c) {
	element a, b, c from goal
	a # b AND b # c | assumption

	element x from goal
	x @ a | assumption
	x @ b | truths
	x @ c | truths
}

theorem in_superset : [a][b][c](a @ b AND b # c -> a @ c){
	element a, b, c from goal
	a @ b AND b # c | assumption
	a @ c | truths
}

theorem uniqueness_helper [P(2)] : [a]{b}[x](x @ b <-> P(a, x)) -> [a]{b}([x](x @ b <-> P(a, x)) AND [c]([x](x @ c <-> P(a, x)) -> b = c)) {
	[a]{b}[x](x @ b <-> P(a, x)) | assumption
	element a from goal
	element b from {b}[x](x @ b <-> P(a, x)) | truths
	use b

	lemma : [c]([x](x @ c <-> P(a, x)) -> b = c) {
		element c from goal
		[x](x @ c <-> P(a, x)) | assumption

		lemma : b # c {
			element x from goal
			x @ b | assumption
			P(a, x) | truths
			x @ c | truths
		}

		lemma : c # b {
			element x from goal
			x @ c | assumption
			P(a, x) | truths
			x @ b | truths
		}

		b = c | double_inclusion
	}
}