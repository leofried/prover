import zfc.axioms {
	EmptySet
	Extensionality
	Propositions
	Separation
	Subset
	Successor
}

transparent predicate @ from ElementOfSymbol
transparent predicate # from SubsetSymbol
transparent function 0 from EmptySet
transparent function S from Successor

opaque predicate Inductive(a): 0 @ a AND [x @ a](S(x) @ a)

opaque function nat

axiom axiom_of_infinity : Inductive(nat) AND [a](Inductive(a) -> nat # a)

theorem zero_is_nat : 0 @ nat {
	Inductive(nat) | axiom_of_infinity
}

theorem succ_is_nat : [a @ nat] S(a) @ nat {
	Inductive(nat) | axiom_of_infinity
}

theorem nat_induction [P(1)] : P(0) AND [x @ nat](P(x) -> P(S(x))) -> [x @ nat] P(x) {
	P(0) AND [x @ nat](P(x) -> P(S(x))) | assumption
		
	lemma : Inductive(Separate[:(k): P(k)](nat)) {
		lemma : 0 @ Separate[:(k): P(k)](nat) {
			P(0) | truths
			0 @ nat | zero_is_nat
			  @ Separate[:(k): P(k)](nat) | axiom_of_separation
		}

		lemma : [x @ Separate[:(k): P(k)](nat)] S(x) @ Separate[:(k): P(k)](nat) {
			element x from goal
			x @ Separate[:(k): P(k)](nat) | assumption
			x @ nat AND P(x) | axiom_of_separation

			P(S(x)) | truths
			S(x) @ nat | succ_is_nat
			     @ Separate[:(k): P(k)](nat) | axiom_of_separation
		}
	}

	nat # Separate[:(k): P(k)](nat) | axiom_of_infinity

	element x from goal
	x @ nat | assumption
	  @ Separate[:(k): P(k)](nat) | in_superset
	P(x) | axiom_of_separation
}

theorem nat_zero_or_succ : [a @ nat](a = 0 OR {b @ nat} a = S(b)) {
	0 = 0 OR {b @ nat} 0 = S(b) | truths 

	lemma : [a @ nat](a = 0 OR {b @ nat} a = S(b) -> S(a) = 0 OR {b @ nat} S(a) = S(b)) {
		element a from goal
		a @ nat | assumption
	}

	| nat_induction
}

theorem nat_cases [P] : [a @ nat]((a = 0 -> P) AND ({b @ nat} a = S(b) -> P) -> P) {
	element a from goal
	a @ nat | assumption

	a = 0 OR {b @ nat} a = S(b) | nat_zero_or_succ
	(a = 0 -> P) AND ({b @ nat} a = S(b) -> P) | assumption
	P | cases : [a = 0, {b @ nat} a = S(b), P]
}
